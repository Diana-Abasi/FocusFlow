{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Metrics(_ref){let{metrics,streak,resetBadges,badgeCounts}=_ref;const{completedTasks}=metrics;const badgeLevels={Bronze:5,Silver:15,Gold:30,Platinum:50};let currentBadge=null;let nextBadge=null;if(completedTasks>=badgeLevels.Platinum){currentBadge=\"Platinum\";}else if(completedTasks>=badgeLevels.Gold){currentBadge=\"Gold\";nextBadge=\"Platinum\";}else if(completedTasks>=badgeLevels.Silver){currentBadge=\"Silver\";nextBadge=\"Gold\";}else if(completedTasks>=badgeLevels.Bronze){currentBadge=\"Bronze\";nextBadge=\"Silver\";}else{nextBadge=\"Bronze\";}const nextBadgeProgress=nextBadge?(completedTasks/badgeLevels[nextBadge]*100).toFixed(0):100;return/*#__PURE__*/_jsxs(\"section\",{className:\"metrics bg-gradient-to-br from-white to-gray-100 p-6 rounded-lg shadow-lg text-black w-full max-w-md\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-bold mb-4\",children:\"Metrics\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Completed Tasks:\"}),\" \",completedTasks]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Current Streak:\"}),\" \",streak,\" days\"]}),currentBadge&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-lg shadow\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"font-bold text-center\",children:[\"You earned a \",currentBadge,\" Badge!\"]})}),nextBadge&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Next Badge:\"}),\" \",nextBadge]}),/*#__PURE__*/_jsx(\"div\",{className:\"relative w-full bg-gray-200 rounded-full h-4\",children:/*#__PURE__*/_jsx(\"div\",{className:\"absolute bg-green-500 h-4 rounded-full\",style:{width:\"\".concat(nextBadgeProgress,\"%\")}})}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm mt-1 text-center\",children:[nextBadgeProgress,\"% to \",nextBadge,\" Badge\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-bold mb-2\",children:\"Badge History\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-disc pl-6\",children:Object.keys(badgeCounts).map(badge=>/*#__PURE__*/_jsxs(\"li\",{children:[badge,\": \",badgeCounts[badge],\" times\"]},badge))})]}),completedTasks>=badgeLevels.Platinum&&/*#__PURE__*/_jsx(\"button\",{onClick:resetBadges,className:\"mt-6 w-full py-2 bg-red-500 text-white font-bold rounded-lg shadow-lg hover:shadow-xl\",children:\"Reset Badge Progress\"})]});}export default Metrics;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","Metrics","_ref","metrics","streak","resetBadges","badgeCounts","completedTasks","badgeLevels","Bronze","Silver","Gold","Platinum","currentBadge","nextBadge","nextBadgeProgress","toFixed","className","children","style","width","concat","Object","keys","map","badge","onClick"],"sources":["C:/Users/diana/FocusFlow/src/components/Metrics.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction Metrics({ metrics, streak, resetBadges, badgeCounts }) {\r\n  const { completedTasks } = metrics;\r\n\r\n  const badgeLevels = {\r\n    Bronze: 5,\r\n    Silver: 15,\r\n    Gold: 30,\r\n    Platinum: 50,\r\n  };\r\n\r\n  let currentBadge = null;\r\n  let nextBadge = null;\r\n\r\n  if (completedTasks >= badgeLevels.Platinum) {\r\n    currentBadge = \"Platinum\";\r\n  } else if (completedTasks >= badgeLevels.Gold) {\r\n    currentBadge = \"Gold\";\r\n    nextBadge = \"Platinum\";\r\n  } else if (completedTasks >= badgeLevels.Silver) {\r\n    currentBadge = \"Silver\";\r\n    nextBadge = \"Gold\";\r\n  } else if (completedTasks >= badgeLevels.Bronze) {\r\n    currentBadge = \"Bronze\";\r\n    nextBadge = \"Silver\";\r\n  } else {\r\n    nextBadge = \"Bronze\";\r\n  }\r\n\r\n  const nextBadgeProgress = nextBadge\r\n    ? ((completedTasks / badgeLevels[nextBadge]) * 100).toFixed(0)\r\n    : 100;\r\n\r\n  return (\r\n    <section className=\"metrics bg-gradient-to-br from-white to-gray-100 p-6 rounded-lg shadow-lg text-black w-full max-w-md\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Metrics</h2>\r\n      <p><strong>Completed Tasks:</strong> {completedTasks}</p>\r\n      <p><strong>Current Streak:</strong> {streak} days</p>\r\n      \r\n      {currentBadge && (\r\n        <div className=\"mt-4 p-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-lg shadow\">\r\n          <p className=\"font-bold text-center\">You earned a {currentBadge} Badge!</p>\r\n        </div>\r\n      )}\r\n\r\n      {nextBadge && (\r\n        <div className=\"mt-4\">\r\n          <p><strong>Next Badge:</strong> {nextBadge}</p>\r\n          <div className=\"relative w-full bg-gray-200 rounded-full h-4\">\r\n            <div\r\n              className=\"absolute bg-green-500 h-4 rounded-full\"\r\n              style={{ width: `${nextBadgeProgress}%` }}\r\n            ></div>\r\n          </div>\r\n          <p className=\"text-sm mt-1 text-center\">{nextBadgeProgress}% to {nextBadge} Badge</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mt-6\">\r\n        <h3 className=\"text-lg font-bold mb-2\">Badge History</h3>\r\n        <ul className=\"list-disc pl-6\">\r\n          {Object.keys(badgeCounts).map((badge) => (\r\n            <li key={badge}>\r\n              {badge}: {badgeCounts[badge]} times\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {completedTasks >= badgeLevels.Platinum && (\r\n        <button\r\n          onClick={resetBadges}\r\n          className=\"mt-6 w-full py-2 bg-red-500 text-white font-bold rounded-lg shadow-lg hover:shadow-xl\"\r\n        >\r\n          Reset Badge Progress\r\n        </button>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Metrics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}